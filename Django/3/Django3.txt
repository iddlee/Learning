一：模版继承
    在基础模版（父模版）中可以添加很多{% block 参数名 %}{% endblock %}
    标签，子模版可以对该部分内容进行重载、保留、添加。
    子模版使用{% extends '基础模版的位置' %}来继承基础模版。

二：过滤器
    模板过滤器的作用是在模版变量被显示前修改它的值
    常用的过滤器：first、upper、lower、truncatewords、truncatechars、date
    过滤器是在管道符(|)后面，某些过滤器需要参数，使用冒号将过滤器名称与参数分开。
    过滤器可以通过管道符连续使用。

三：locals()函数的作用
    将视图函数中的所有局部变量装配成一个字典类型的数据，字典的键是局部变量的变量名，
    字典的值是局部变量的变量名对应的变量值。

四：Model的操作
    使用Django连接MySQL，需要安装适配器mysqlclient
    安装方法：pip install mysqlclient
    在settings.py配置文件中，
    DATABASES = {
      'default': {
           'ENGINE': 'django.db.backends.mysql',
           'NAME': '连接的库名',
           'USER':'连接mysql的用户名',
           'PASSWORD':'密码',
           'HOST':'mysql所在的主机IP',
           'PORT':3306,
       }
    }

    在应用的models.py中创建自定义的Model类，继承django.db.models.Model类。
    自定义的Model类名对应于数据库表（表名为“应用名_类名”）；
    类属性对应于表中的字段。
    python manage.py makemigrations   制作迁移计划
    python manage.py migrate  迁移模型结构到表中

    Django操作数据库的代码：
    1.添加数据
      方式一：
      实例化对象，并调用save()方法 
      eg:
      p = Park(name="xx",address="xx",ticket="")
      p.save()

      方式二：
      使用模型类的"对象管理器objects"的create()方法,该方法返回新插入的Model对象
      eg:
      Park.objects.create(name="xx",address="xx",ticket="xx")

    2. 修改数据
       使用模型对象（该模型对象已经关联了数据库中的一条记录），修改该对象
       的相关属性值，并调用save()方法
       eg:
       park = Park.objects.get(id=1)   # 查询id为1的记录，并封装成对象
       park.ticket = 2   # 修改ticket属性
       park.save()    # 修改

    3. 查询数据
       情况一：
       查询一条记录，使用对象管理器的get()方法,返回的类型是自定义的模型类
       注意：对象管理器的get()方法,只允许获取一条记录，没有查询到或者超过一条记录，
             都会报错。
       park = Park.objects.get(id=2)

       情况二：
       查询所有数据
       使用对象管理器的all()方法,查询出的对象是一个QuerySet对象，这是一个容器对象。
       可以使用for循环遍历;也可以通过索引来获取QuerySet中的元素
       eg:  
       parks = Park.objects.all()
       for park in parks:
           print(park.name)

       情况三：
       查询符合要求的记录
       使用对象管理器的filter()方法,查询出的对象是一个QuerySet对象
       eg:
       parks = Park.objects.filter(address="北京")
		for park in parks:
           		print(park.name)

    4. 删除数据
       情况一：
       使用模型对象的delete()方法删除
       eg: Park.objects.get(id=1).delete()

       情况二：
       使用QuerySet的delete()方法删除
       qs = Park.objects.all()
       qs.delete()
 

      
    

   



