一：连接查询
    1. 等值连接
       select 字段列表 from 表A,表B,... where 连接条件 [其他筛选条件];

    2. 内连接
       select 字段列表 from 表A inner join 表B on 连接条件 [其他筛选条件];

    3. 外连接
       左外连接(left join)：
       select 字段列表 from 表A left join 表B on 连接条件 [其他筛选条件];
       注意：左外连接的查询结果包括所有符合连接条件的记录信息，和左表中不符合
             连接条件的记录。
       
       右外连接(right join):
       select 字段列表 from 表A right join 表B on 连接条件 [其他筛选条件];
       注意：右外连接的查询结果包括所有符合连接条件的记录信息，和右表中不符合
             连接条件的记录。

二：子查询
    子查询的结果经常作为外部查询的条件，子查询要用括号括起来。
    常与子查询一起使用的关键字：
    in : 用于匹配某个（某些）字段值与子查询结果集。
    all : 用于判断字段值是否与子查询结果集中的所有记录值的大小。
    any : 用于判断字段值是否与子查询结果集中的任何一个记录值的大小。

三：事务(transaction)
    事务：事务是指具有一系列操作的逻辑工作单元，这个逻辑工作单元中的所有
          操作作为一个整体，要么全部成功，要么全部失败。
    事务的特性（ACID）：
    1. 原子性（Atomicity）
       事务中的所有操作作为一个整体，不可再分，所有操作要么全部成功，
       要么全部失败。

    2. 一致性(Consistency)
       事务操作前后，系统数据的状态从一种一致性(平衡的状态)
       到另一种一致性(平衡的状态)。

    3. 隔离性(Isolation)
       数据库系统可以被多个事务并发操作，在一个事务操作的过程中，其他事务不能查看
       其操作的过程，只能查看操作成功之后（之前）的状态。针对隔离性，事务有四种
       隔离级别：读未提交(read uncommitted)级别、读提交级别(read committed)、
       可重读级别(repeatable)、串行化级别(serializable)。

    4. 持久性(Durability)
       事务一旦提交，则对数据库系统的影响是持久的。

四：数据库锁（事务锁）
    从读、写的角度看，锁可以被分成两大类：
    读锁（也叫共享锁）、写锁（也叫排他锁）。
    一个事务对某些数据加了读锁后，其他事务也可以对这些数据加读锁，但不能
    对这些数据加写锁！

    一个事务对某些数据加了写锁后，其他事务对这些数据既不能加读锁，也不能加
    写锁！
    
    一般情况下，在操作数据库的过程中，不必显式加锁，因为DBMS会自动在合适的
    地方为事务加锁。

    加读锁的方法：
    select 字段列表 from 表名称 [过滤条件] lock in share mode;
    要注意的是：在事务的“串行化隔离级别”中，普通的select语句也会加读锁。

    加写锁的方法：
    update、delete语句。
    select 字段列表 from 表名称 [过滤条件] for update;

五：事务的隔离级别
    脏读：一个事务读取到了另一个事务还未提交的数据，这种现象叫做"脏读",读取到的
          未提交的数据叫做"脏数据"。
    不可重读：一个事务中两次读取的数据不一致的现象。
    幻读：一个事务中两次读取的数据记录数（条数）不一致的现象。
    
    1. 读未提交级别(read uncommitted)
       设置了该隔离级别的事务可能会发生脏读、不可重读、幻读。

    2. 读提交级别(read committed)
       设置了该隔离级别的事务可能会发生不可重读、幻读。

    3. 可重读级别(repeatable)======MySQL默认的事务隔离级别
       设置了该隔离级别的事务，解决了脏读、不可重读的现象，而且InnoDB数据库存储
       引擎也帮助解决了幻读的问题。

    4. 串行化级别(serializable)
       在事务的“串行化隔离级别”中，普通的select语句也会加读锁。
       
       



